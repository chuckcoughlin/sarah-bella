#!/bin/sh

### BEGIN INIT INFO
# Provides:          ros
# Required-Start:    $local_fs $remote_fs dbus
# Required-Stop:     $local_fs $remote_fs dbus
# Should-Start:      $named
# Should-Stop:       $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start roscore
### END INIT INFO

set -e

PATH=/opt/ros/kinetic/bin:/bin:/usr/bin:/sbin:/usr/sbin
export ROSLOG=/var/log/ros.log

. /lib/lsb/init-functions
# NOTE: HOME is the sudoer home directory
export HOME=/home/chuckc
export ROS_ROOT=/opt/ros/kinetic/share/ros
export ROS_ETC_DIR=/opt/ros/kinetic/etc/ros
export PYTHONPATH=${HOME}/catkin_ws/devel/lib/python2.7/dist-packages:/opt/ros/kinetic/lib/python2.7/dist-packages

case "$1" in
  start)
#       Uncomment for debugging, execute as: sudo bin/ros start
#        set -x
	. /opt/ros/kinetic/setup.sh
	. ${HOME}/robotics/robot/config/launch.conf
	# This is important. You must wait until the IP address of the machine
	# is actually configured. Otherwise, you will get an error and launch
	# will fail. Loop until the IP comes up. 
 	while true; do
          IP="`hostname -I`"
          if [ "$IP" ] ; then
             echo "IP = ${IP}" >> ${ROSLOG}
             break
          fi
	  sleep 1
  	done
	IP=`echo ${IP}|sed -e 's/^[ \t]*//'`
	export ROS_IP=${IP}
	export ROS_MASTER_URI="http://${IP}:11311"
	export ROS_PACKAGE_PATH=${HOME}/catkin_ws/src:/opt/ros/kinetic/share
	> $ROSLOG
	echo "=============================== /etc/init.d/ros start ===========================" >> ${ROSLOG}
	roslaunch ${LAUNCH_PKG} ${LAUNCH_FILE} >>${ROSLOG} 2>&1 &
  ;;

  restart)
    /etc/init.d/ros stop
    /etc/init.d/ros start
  ;;

  stop)
	. /opt/ros/kinetic/setup.sh
	for i in $(rosnode list) ; do
		rosnode kill $i
	done
  	killall roslaunch
  	killall roscore
	echo "=============================== /etc/init.d/ros stopped ===========================" >> ${ROSLOG}
  ;;
  force-reload)
    /etc/init.d/ros restart
  ;;

  *)
    echo "Usage: /etc/init.d/ros {start|stop|restart|force-reload}"
    exit 1
    ;;
esac
